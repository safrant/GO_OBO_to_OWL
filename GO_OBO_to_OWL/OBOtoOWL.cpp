#include "OBOtoOWL.h"   OBOtoOWL::OBOtoOWL(void) { }   OBOtoOWL::~OBOtoOWL(void) { }   int ReverseFind(const string &str, char c) { 	return (int)str.rfind( c ); }  string LSubString (const string &s, int n) { 	if (n < 0) return(""); 	return(s.substr(0, n)); }  string RSubString (const string &s, int n) { 	if (n < 0) return(""); 	int len = s.size(); 	if (len < n) 	{ 		return(""); 	} 	else 	{ 		string str = s.substr(len-n, n); 		return(str); 	} }  string TrimRight(string &s) {    //if (s[s.length()-1] == ' ')    if (RSubString(s, 1).compare(" ") == 0)    { 	   string t = LSubString(s, s.length()-1); 	   return TrimRight(t);    }    return s; }  string TrimLeft(string &s) { //   if (s[s.length()-1] == ' ')    if (LSubString(s, 1).compare(" ") == 0)    { 	   string t = RSubString(s, s.length()-1); 	   return TrimLeft(t);    }    return s; }   string TrimRightChar(string s, char c) { 	if (s.length() == 0) return s; 	char b[1]; 	sprintf(b, "%c", c); 	string t = b;  	if (t.compare(s) == 0) return ""; 	string str = s; 	str = TrimRight(str); 	if (RSubString(str,1).compare(t) == 0) return TrimRightChar(LSubString(str,str.length()-1), c); 	str = TrimRight(str); 	return str; }   string TrimLeftChar(string s, char c) { 	if (s.length() == 0) return s; 	char b[1]; 	sprintf(b, "%c", c); 	string t = b; 	if (t.compare(s) == 0) return ""; 	string str = s; 	str = TrimLeft(str); 	if (LSubString(str,1).compare(t) == 0) return TrimLeftChar(RSubString(str,str.length()-1), c); 	str = TrimLeft(str); 	return str; }   string TrimTerminatingNonAlphaNumChars(string s) { 	if (s.length() == 0) return s; 	if (!isalnum(s[s.length()-1]) 		  && s[s.length()-1] != '.' 		  && s[s.length()-1] != '/' 		  && s[s.length()-1] != ')' 		  && s[s.length()-1] != '\"' // 6/20/08 RWW 		  && s[s.length()-1] != '[' // 01/29/09 TS 		  ) 	{ 		return TrimTerminatingNonAlphaNumChars(LSubString(s,s.length()-1)); 	} 	return s; }    string TrimStartingNonAlphaNumChars(string s) { 	if (s.length() == 0) return s; 	if (!isalnum(s[0])) 	{ 		return TrimStartingNonAlphaNumChars(RSubString(s,s.length()-1)); 	} 	return s; }  bool StartWith(string line, string tag) {     int tag_len = tag.length(); 	if (LSubString(line,tag_len).compare(tag) == 0) return true; 	return false; }   bool EndWith(string line, string tag) {     int tag_len = tag.length(); 	if (RSubString(line,tag_len).compare(tag) == 0) return true; 	return false; }